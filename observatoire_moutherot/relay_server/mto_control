#!/usr/bin/python
import os
import sys
sys.path.append('/home/fmeyer/git/dulleutil/observatoire_moutherot/relay_server/')
import tkinter as tk
from tkinter import messagebox
import requests
import subprocess
import re
import asyncio
from time import sleep
import paramiko
import socket
import threading
from relay_rsc import *
from datetime import datetime  # Import datetime module for timestamp

lock = threading.Lock()
sock=False
oidup=False

network="192.168.1"
broadcast=network+".255"

r8IP=network+".23"
relay8_read="http://fmeyer:4so4xRg9@"+r8IP+"/relays.cgi"

oidIP=network+".29"
pi3IP=network+".27"
r16IP=network+".28"

r16Addr="http://"+r16IP+"/30"
relay16Read=r16Addr+"/99"

buttons=[]
grid_frame16 = []
grid_frame8 = []
call_counter=0
class SSHClient:
    def __init__(self, host, port, username, private_key_file):
        self.host = host
        self.port = port
        self.username = username
        self.private_key_file = private_key_file
        self.client = paramiko.SSHClient()
        self.transport = self.client.get_transport()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.connect()

    def connect(self):
        global oidup
        try:
            # Load SSH private key
            sock = socket.create_connection((self.host, self.port), timeout=1)
            private_key = paramiko.RSAKey.from_private_key_file(self.private_key_file)

            # Connect to SSH server using key-based authentication
            self.client.connect(self.host, self.port, self.username, pkey=private_key,sock=sock)
            self.transport=self.client.get_transport()
            #print(f"Connected to {self.host}")
            oidup=True

        except:
            #addLog(f"ssh connect %s failed"%(self.host))
            oidup=False

    def sendCommand(self, command):
        if self.transport and self.transport.is_active():
            try:
                stdin, stdout, stderr = self.client.exec_command(command)
                return stdout.read().decode('utf-8')
            except:
                #addLog("ssh send_cmd %s failed "%self.host)
                return "failed"

    def close(self):
        if self.client:
            self.client.close()
            addLog(f"Connection to {self.host} closed")

# Function to listen on UDP port and update the latest message
def initUDPListener():
    global sock
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind(('', 2345))
    sock.setblocking(0)  # Non-blocking mode
    return sock

# Function to update the label in the Tkinter window
def update_label():
    # This function runs in the Tkinter main loop to refresh the label with the latest message
    message_label.config(text=latest_message.get())
    root.after(100, update_label)  # Check again after 100 ms


def confirm_action(action):
    # Display a confirmation dialog
    confirmed = messagebox.askyesno('Confirm', action)
    if confirmed:
        # User clicked 'Yes' to confirm the action
        return True
        # Add your action logic here (e.g., execute a function or command)
    else:
        # User clicked 'No' or closed the dialog
        return False

def testConnectivity(host, port, timeout=1):
    try:
        with socket.create_connection((host, port), timeout):
            return True
    except (socket.timeout, ConnectionRefusedError, OSError):
        return False


class checkItems:
    def __init__(self,widget, row, col, span, color1='lightgreen', color2='yellow', period=1, width=4, label="01234",color='lightgreen', address=broadcast, port=22):
        self.widget=widget
        self.color1=color1
        self.color2=color2
        self.period=period
        self.widget.config
        self.widget.config(anchor="center", text=label)
        self.widget.grid(row=row, column=col,columnspan=span)
        self.color=color1
        self.address=address
        self.port=port

class updatesManager():
    def __init__(self):
        self.color1='lightgreen'
        self.color2='yellow'
        self.updates={'time': 1, 'focuser': 10,'oid': 101, 'r16': 103, 'pi3': 107}
        self.maxup=self.updates['pi3']*self.updates['r16']
        self.counter=0
        self.color=self.color1

    def update(self):

        if (self.counter % focuser.period == 0):
            focuser.color=focuser.color1 if focuser.color == focuser.color2 else focuser.color2
            try:
                focuser.widget.config(text=latest_message, bg=focuser.color)  # update existing pos
            except:
                pass
        
        if (self.counter % clock.period == 0):
            current_time = datetime.now().strftime("%H:%M:%S")  # Format time as YYYY-MM-DD HH:MM:SS
            clock.widget.config(text=current_time)  # Clear existing text

        if (self.counter % pollR16.period == 0):
            if testConnectivity(pollR16.address, pollR16.port, timeout=1):
                pollR16.color=pollR16.color1 if pollR16.color==pollR16.color2 else pollR16.color2
                pollR16.widget.config(bg=pollR16.color)  # Clear existing text
            else:
                pollR16.widget.config(bg='red')  # Clear existing text

        if (self.counter % pollOid.period == 0):
            if testConnectivity(pollOid.address, pollOid.port, timeout=1):
                pollOid.color=pollOid.color1 if pollOid.color==pollOid.color2 else pollOid.color2
                pollOid.widget.config(bg=pollOid.color)  # Clear existing text
            else:
                pollOid.widget.config(bg='red')  # Clear existing text

        if (self.counter % pollPi3.period == 0):
            if testConnectivity(pollPi3.address, pollOid.port, timeout=1):
                pollPi3.color=pollOid.color1 if pollOid.color==pollOid.color2 else pollOid.color2
                pollPi3.widget.config(bg=pollOid.color)  # Clear existing text
            else:
                pollPi3.widget.config(bg='red')  # Clear existing text

        self.counter=self.counter+1 % self.maxup
        root.after(100, self.update)  # Update every 100 ms (.1 second)

def getRelay8Status():
    try:
        # print(relay8_read)
        status=make_http_request(relay8_read).text.splitlines()
    except:
        #addLog(" Relay8 request failed (%s)"%relay8_read)
        return
    filtered=[line for line in status if ': ' in line]
    fields=filtered[0].split()
    for i in range(1,8):
        match="Relay%d"%i
        relay=relays_8[match]
        if relay['position']>=0:
            if relay['config']=="NO": # normally open
                if fields[i]!=relay['config']:
                    relay['status']="OFF" if fields[i] == '0' else 'ON'
            if relay['config']=="NC": # normally closed
                if fields[i]!=relay['config']:
                    relay['status']="ON" if fields[i] == '0' else 'OFF'
            relay['button'].config(fg='red' if relay['status'] == 'OFF' else 'green')

def getRelay16Status():
    # Fetch the relay status
    try:
        response = requests.get(relay16Read, timeout=5)
        response_text = response.text.strip()
        
        # Extract the ASCII data from the response
        if r16Addr in response_text:
            ascii_data = response_text.split('/')[9].split('"')[0].strip()
        else:
            print("Unexpected response format:", response_text)
            return

        # Update the status of each relay in the array
        for relay_key, relay in relays_16.items():
            relay_number = int(relay_key.split('-')[1]) - 1
            relay['status'] = "ON" if ascii_data[relay_number] == '1' else "OFF"
            relay['button'].config(fg='red' if relay['status'] == 'OFF' else 'green')
            addr=2*relay_number                 # if relay is on, address to call to set it off
            if ascii_data[relay_number] == '0':  # if relay is off,
                addr=addr+1                     # address to call to set it on 
            relay['url']="%s/%.2d"%(r16Addr,addr)

    except requests.RequestException as e:
        print("Error fetching relay status:", e)

#              def getRelay16Status():
#                  with open ("/tmp/relay16", "w") as f:
#                      try:
#                          for i in range(4):
#                              f.write(make_http_request(relay16Read).text)
#                      except:
#                          #addLog("Relay16 request failed (%s)"%relay16Read)
#                          return
#           
#                  status16="cat /tmp/relay16 |sed 's/<p>R/<p> R/g;s/<p> R/\n<p> R/g;s@&nbsp@@g'|\
#                  grep 'Relay...:'|\
#                  sed 's@<center.*@@;s@<small>.*</small>@@;s@> ON/@>ON/@;s@>O@ >O@g;s@</font>@@;s@028@0.28@;s@href=@@;s@\"@@g'|\
#                  awk '{print $2 \" \" $5 \" \" $7}'"
#                  status16="cat /tmp/relay16 |sed 's/<p>R/<p>\ R/g;s/<p> R/\\n<p> R/g;s@&nbsp@@g'|grep 'Relay...:'|"
#                  status16+="sed 's@<center.*@@;s@<small>.*</small>@@;s@> ON/@>ON/@;s@>O@ >O@g;s@</font>@@;s@028@0.28@;s@href=@@;s@\"@@g;s@: @ @'|"
#                  status16+="awk '{print $2 \" \" $5 \" \" $7}'"
#           
#                  # Execute the command
#                  process = subprocess.Popen(status16, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
#           
#                  # Wait for the process to complete and capture output
#                  stdout, stderr = process.communicate()
#           
#                  # Check the return code
#                  return_code = process.returncode
#                  if return_code == 0:
#                      for line in stdout.splitlines():
#                          fields=line.split()
#                          if fields[0] in relays_16:
#                              relay=relays_16[fields[0]];
#                              if fields[1]!=relay['status']:
#                                  relay['status']=fields[1]
#                                  relay['button'].config(fg='red' if relay['status'] == 'OFF' else 'green')
#           
#                              relay['url']=fields[2]
#           
#                  else:
#                      print("Command '{command}' failed with return code {return_code}\nError: {stderr.strip()}")

def make_http_request(url):
    sys.stderr.write(url+"\n")
    try:
        # Send GET request to the specified URL
        response = requests.get(url, timeout=(.5,.5))
        # Check if the request was successful (status code 200)
        if response.status_code == 200:
            # Process the response data (in this example, just print it)
            return response
        else:
            #print(f"HTTP Request Failed with status code: {response.status_code}")
            pass

    except requests.exceptions.RequestException as e:
        # Handle exceptions (e.g., connection error, timeout)
        #print(f"HTTP Request Error")
        pass

def invertLastBitInUrl(url):
    # Find the last segment of the URL that contains the hexadecimal value
    match = re.search(r'/([0-9a-fA-F]{2})$', url)

    if match:
        # Extract the hexadecimal value from the URL
        hex_value = match.group(1)

        # Convert the hexadecimal value to an integer
        decimal_value = int(hex_value, 16)

        # Flip the least significant bit (LSB)
        inverted_value = decimal_value ^ 0x01

        # Convert the inverted value back to a hexadecimal string
        inverted_hex = format(inverted_value, '02x')  # Format as a 2-character hexadecimal string

        # Replace the original hexadecimal value with the inverted value in the URL
        modified_url = url[:match.start(1)] + inverted_hex + url[match.end(1):]

        return modified_url
    else:
        # If no match is found (e.g., no hexadecimal value in the URL), return the original URL
        return url

# Function to quit the application
def quitApp():
    root.destroy()  # Close the main window and terminate the application

def readStatus():
    global ssh_client, call_counter, latest_message
    pollper=0.1           # poll every 5 seconds
    logfreq=60          # log every 60 seconds
    maxcount=logfreq/pollper
    while True:
        call_counter = (call_counter+1) % maxcount
        if call_counter == 1: # log every ~ minute (once per maxcount)
            pass
            # addLog("Mark")

        if call_counter %50 == 0:
            getRelay8Status()
            getRelay16Status()
            getCmdStatus()
            try:
                if not ssh_client.transport.is_active():
                    ssh_client.connect()
            except:
                ssh_client.connect()

        #root.after(1000*pollper, readStatus)

        while True: # read all available data from the focuser udp port
            try:
                data, addr = sock.recvfrom(1024)  # Buffer size is 1024 bytes
                latest_message="Focus: "+data.decode('utf-8').strip().split()[0]+" mm"  # Update the StringVar
            except BlockingIOError:
                break  # No data received, wa have the latest position available, so break the loop
        sleep(pollper)

# Define internal functions to be executed for each cell
def callback8( relais):
    if relais['confirm'] and relais['status'] == 'ON':
        # ask confirmation when
        #   'confirm' is true AND
        #     action is to switch off
        try:
            rname=relais['name'][1]
        except:
            rname=relais['name'][0]
        # simplified version for Relay8 as only OFF actions are expected to ask confirmation
        addsw=' OFF';
        action="%s%s"%(rname,addsw)
        if not confirm_action(action +" ?"):
            addLog(action+" cancelled")
            return False
        print("confirmed")

    request=relay8_read+"?relay=%d"%relais['addr']
    try:
        make_http_request(request)
    except:
        #addLog("R8 command request failed: %s"%request)
        pass
    getRelay8Status()

def callback16(relais):
    if relais['confirm'] and (relais['status'] == 'ON' or relais['type']=='TEMP'):
        # ask confirmation when
        #   'confirm' is true AND
        #     action is to switch off  OR type is TEMP (roof cmds)
        try:
            rname=relais['name'][1]
        except:
            rname=relais['name'][0]
        addsw="" if relais['type']=='TEMP' else ' OFF' if relais['status'] == 'ON' else ' ON';
        action="%s%s"%(rname,addsw)
        if not confirm_action(action +" ?"):
            addLog(action+" cancelled")
            return False
        print("confirmed")

    try:
        make_http_request(relais['url'])
    except:
        #addLog("R16 command request failed: %s"%relais['url'])
        pass
    url=invertLastBitInUrl(relais['url'])
    #print(url)
    if relais['type']=='TEMP':
        sleep(.1)
        make_http_request(url)

    getRelay16Status()

def getCmdStatus():
    global oidup

    font='Helvetica'
    fontsize=10
    covstatus=ssh_client.sendCommand("gstatus")

    for com in cmds:
        cmds[com]['button'].config(state=tk.DISABLED if not oidup else tk.NORMAL)

    if oidup:
        if covstatus:
            status=covstatus.strip().split()
            cov=int(status[0])
            bat=int(status[1])
        else:
            cov=-1
            bat=-1

        other=bat # tricky trickster
        for com in cmds['movecover'],cmds['movebath']:
            com['status']=cov
            com['button'].config(fg='blue' if com['status'] == 'CLOSED' else 'green',
                                 text=com['name'][com['status']],
                                 command=lambda relais=com, cmd=com['cmd'][com['status']]:
                                 remoteCmd(relais, cmd),
                                 state=tk.DISABLED if (other == 1 or not covstatus) else tk.NORMAL,
                                 font=(font, fontsize))
            other=cov
            cov=bat

def remoteCmd(relais, cmd):
    if relais['confirm']:
        if not confirm_action(relais['name'][0]+' ?'):
            addLog(relais['name'][0]+" cancelled")
            return False
        print("confirmed")

    if relais['remote']:
        ssh_client.sendCommand(cmd)
        addLog("sent "+ cmd)
        getCmdStatus()
    else:
        syscom="/home/fmeyer/git/dulleutil/observatoire_moutherot/obslm.bash "+cmd
        process = subprocess.Popen(syscom, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        addLog("execd "+syscom)

def createGrid(items, rset):
    font='Helvetica'
    fontsize=10

    if rset==16:
        frame=grid_frame16
        incpos=1 # that's 1 for the title

    if rset==8:
        frame=grid_frame16
        incpos=18 # that's 2 for the titles, 16 for the relay16

    if rset==0:
        frame=grid_cmd
        incpos=5 # that's 1 for the title, 2 for time 3 for focuser 4 for pi/oid/r16

    if rset==1:
        frame=grid_cmd2
        incpos=1 # that's 1 for the title

    for relayid,relay in items:
        if relay['position']>=0:
            button_text = relay['name'][0]

            # Create button and bind the corresponding function
            if rset==16:
                relay['button'] = tk.Button(frame, text=button_text, width=4, height=2,
                               fg='red' if relay['status']=="OFF" else 'green',
                               command=lambda relais=relay: callback16(relais),
                                            font=(font, fontsize))
                row=incpos+int((relay['position'])/3)
                #relay['button'].grid(row=row, column=0, padx=1, pady=1)
                relay['button'].grid(row=row, column=relay['position']%3)
            if rset==8:
                relay['button'] = tk.Button(frame, text=button_text, width=4, height=2,
                               fg='red' if (relay['status']=="OFF" and relay['config']=="NO" or
                                            relay['status']=="ON" and relay['config']=="NC") else 'green',
                               command=lambda relais=relay: callback8(relais),
                                            font=(font, fontsize))
                row=incpos+int((relay['position'])/3)
                #relay['button'].grid(row=row, column=0, padx=1, pady=1)
                relay['button'].grid(row=row, column=relay['position']%3) 

            if rset==0 or rset==1:
                relay['button'] = tk.Button(frame, text=button_text, width=6, height=2,
                               fg='red' if relay['status']!=0 else 'green',
                               command=lambda cmd=relay['cmd'][relay['status']],
                                            relais=relay: remoteCmd(relais, cmd),
                                            font=(font, fontsize))

                row=incpos+int((relay['position'])/3)
                #relay['button'].grid(row=row, column=0, padx=1, pady=1)
                relay['button'].grid(row=row, column=relay['position']%3) 
                #row=relay['position']+incpos
                #relay['button'].grid(row=row, column=0, padx=1, pady=1)
                #relay['button'].grid(row=row, column=0)

            buttons.append(relay['button'])

def addLog(message):
    global log_text,lock

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # Get current timestamp in desired format
    formatted_message = f"{timestamp} {message}"  # Concatenate timestamp with message
    with lock:
        log_text.config(state=tk.NORMAL)  # Allow modifications to the Text widget
        log_text.insert(1.0, formatted_message + '\n')  # Insert message at the beginning (top) of the Text widget
        log_text.config(state=tk.DISABLED)  # Prevent further modifications to preserve read-only state

#url = "https://jsonplaceholder.typicode.com/posts/1"  # Example URL (replace with your URL)
#make_http_request(url)
# Create the GUI
# Start the GUI main loop
# Create the GUI
root = tk.Tk()
root.title("Obs Moutherot control")

# Create three frames for the first row (three vertical frames)
#grid_frame16 = tk.Frame(root, width=200, height=100, bg="lightblue")
grid_frame16 = tk.Frame(root, width=200, height=100)
grid_cmd = tk.Frame(root, width=200, height=100)
grid_cmd2 = tk.Frame(root, width=200, height=100)

# Layout frames in the first row using grid
grid_frame16.grid(row=0, column=0, padx=1, pady=1)
grid_cmd.grid(row=0, column=1, padx=1, pady=1)
#grid_cmd2.grid(row=0, column=2, padx=10, pady=10)

# Create a frame for the second row (single frame spanning full width)
bottom = tk.Frame(root, width=600, height=150, bg="lightyellow")

# Layout frame in the second row using grid
bottom.grid(row=1, column=0, columnspan=3, padx=10, pady=10, sticky="nsew")

# Configure row and column weights for resizing
root.grid_rowconfigure(0, weight=1)  # Allow first row to expand vertically
root.grid_rowconfigure(1, weight=1)  # Allow second row to expand vertically
root.grid_columnconfigure(0, weight=1)  # Allow column 0 to expand horizontally
root.grid_columnconfigure(1, weight=1)  # Allow column 1 to expand horizontally
root.grid_columnconfigure(2, weight=1)  # Allow column 2 to expand horizontally


# Create a scrolled Text widget for displaying error messages
log_text = scrolledtext.ScrolledText(bottom, width=120, height=6, wrap=tk.WORD)
log_text.pack(padx=1, pady=1)
log_text.config(state=tk.DISABLED)

# Refresh button spanning 2 columns
#refresh_button = tk.Button(top_frame, text="Refresh", command=readStatus)
#refresh_button.grid(row=0, column=0, columnspan=2, padx=10, pady=10)
# Frame to hold the grid of buttons
#grid_frame = tk.Frame(root)
#grid_frame.pack()

# Grids for the switch :
title_r16 = tk.Label(grid_frame16, text="Relay 16", font=("Helvetica", 16, "bold"))
title_r16.grid(row=0, columnspan=3)

title_r8 = tk.Label(grid_frame16, text="Relay 8", font=("Helvetica", 16, "bold"))
title_r8.grid(row=17, columnspan=3)

title_cmd = tk.Label(grid_cmd, text="Cmds", font=("Helvetica", 16, "bold"))
title_cmd.grid(row=1, columnspan=3)

#title_cmd2 = tk.Label(grid_cmd2, text="Command Set #2", font=("Helvetica", 16, "bold"))
#title_cmd2.grid(row=0)

createGrid(relays_16.items(),16)
createGrid(relays_8.items(),8)
createGrid(cmds.items(),0)
#createGrid(cmds2.items(),1)

clock=checkItems(widget=tk.Label(grid_cmd, height=1, width=10, font=("Helvetica", 18)),row=0, col=0, span=3,color1='lightgreen', color2='yellow', period=10, label="Time")

#clock = tk.Label(grid_cmd, height=1, width=10, font=("Helvetica", 18))
#clock.config(anchor="center")
#clock.grid(row=0, column=0,columnspan=3)


#clock.pack(pady=20)
#focuser = tk.Label(grid_cmd, height=1, width=18, font=("Helvetica", 12))
#focuser.config(anchor="center")
#focuser.grid(row=1, column=0,columnspan=3)

focuser=checkItems(widget=tk.Label(grid_cmd, height=1, width=15, font=("Helvetica", 12)),row=1, col=0, span=3,color1='lightgreen', color2='#ccffcc', period=10, label="foc")
pollR16=checkItems(widget=tk.Label(grid_cmd, height=1, width=5, font=("Helvetica", 12)),row=2, col=0, span=1,color1='lightgreen',  color2='#ccffcc', period=301, label="R16", address=r16IP, port=80)
pollOid=checkItems(widget=tk.Label(grid_cmd, height=1, width=5, font=("Helvetica", 12)),row=2, col=1, span=1,color1='lightgreen',  color2='#ccffcc', period=301, label="OID", address=oidIP, port=22)
pollPi3=checkItems(widget=tk.Label(grid_cmd, height=1, width=5, font=("Helvetica", 12)),row=2, col=2, span=1,color1='lightgreen',  color2='#ccffcc', period=301, label="PI3", address=pi3IP, port=22)

# Quit button
quit_button = tk.Button(root, text="Quit", command=quitApp)
quit_button.grid(row=2, column=0, columnspan=3)
# Initialize SSH client with SSH key authentication
ssh_key_file = '/home/fmeyer/.ssh/obsm'
ssh_client = SSHClient(oidIP, 22, 'fmeyer', ssh_key_file)
latest_message = "Focuser"
udp_socket=initUDPListener()
updates=updatesManager()

processor_thread = threading.Thread(target=readStatus)
processor_thread.daemon = True
processor_thread.start()
updates.update()
#readStatus()
root.mainloop()
